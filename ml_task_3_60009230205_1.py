# -*- coding: utf-8 -*-
"""ML task 3_60009230205.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1un42XNWohAkBwr-QD3FfTvnxzdam1Nnp

### Name : Umang Prajapati

### Sap : 60009230205
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
df=pd.read_csv('/content/covtype.csv')

df.tail(10)

df.info()

df.isnull().sum()

df.shape

df.dropna(inplace=True)

df_without_soil = df.drop(df.columns[10:54], axis=1)

plt.figure(figsize=(8,8))
sns.heatmap(df_without_soil.corr(), annot=True, cmap='coolwarm')
plt.title('Heatmap of Correlations ')
plt.show()

plt.figure(figsize=(8,8))
plt.scatter(df_without_soil['Horizontal_Distance_To_Hydrology'], df_without_soil['Vertical_Distance_To_Hydrology'])
plt.xlabel('Horizontal Distance To Hydrology')
plt.ylabel('Vertical Distance To Hydrology')
plt.title('Scatter Plot of Horizontal and Vertical Distance to Hydrology')
plt.show()

plt.figure(figsize=(8,8))
sns.scatterplot(x=df_without_soil['Hillshade_Noon'], y=df_without_soil['Hillshade_3pm'], color='purple')
plt.xlabel('Hillshade Noon')
plt.ylabel('Hillshade 3pm')
plt.title('Scatter Plot of Hillshade Noon and Hillshade 3pm')
plt.show()

import plotly.graph_objects as go
trace1 = go.Box(
    y=df["Vertical_Distance_To_Hydrology"],
    name='Vertical Distance',
    marker=dict(color='rgb(0,145,119)')
)

trace2 = go.Box(
    y=df["Horizontal_Distance_To_Hydrology"],
    name='Horizontal Distance',
    marker=dict(color='rgb(5, 79, 174)')
)
data = [trace1, trace2]
layout = dict(
    title='Box Plot for Vertical and Horizontal Distance to Hydrology',
    xaxis=dict(title='Distance Type'),
    yaxis=dict(title='Distance (meters)'),
    height=600,
    width=800
)
fig = go.Figure(data=data, layout=layout)
fig.show()

import plotly.graph_objects as go
trace1 = go.Box(
    y=df["Hillshade_Noon"],
    name='Hillshade Noon',
    marker=dict(color='rgb(255,0,0)')
)

trace2 = go.Box(
    y=df["Hillshade_3pm"],
    name='Hillshade 3pm',
    marker=dict(color='rgb(0, 0, 255)')
)
data = [trace1, trace2]
layout = dict(
    title='Box Plot for Hillshade Noon and 3pm',
    xaxis=dict(title='Time of Day'),
    yaxis=dict(title='Hillshade'),
    height=600,
    width=800
)

fig = go.Figure(data=data, layout=layout)
fig.show()

fig, axes = plt.subplots(1, 2, figsize=(12,6))

axes[0].hist(df_without_soil['Vertical_Distance_To_Hydrology'], bins=20, color='blue', alpha=0.7)
axes[0].set_xlabel('Vertical Distance to Hydrology (meters)')
axes[0].set_ylabel('Frequency')
axes[0].set_title('Vertical Distance to Hydrology')

axes[1].hist(df_without_soil['Horizontal_Distance_To_Hydrology'], bins=20, color='orange', alpha=0.7)
axes[1].set_xlabel('Horizontal Distance to Hydrology (meters)')
axes[1].set_ylabel('Frequency')
axes[1].set_title('Horizontal Distance to Hydrology')

plt.tight_layout()
plt.show()

soil_types = df.iloc[:,14:-1].sum(axis=0,numeric_only=True)

plt.figure(figsize=(12,10))
sns.barplot(x=soil_types.index, y=soil_types.values,
            palette="rocket")

plt.xticks(rotation= 75)
plt.ylabel('Total')
plt.title('Count of Soil Types With Value 1',
          color = 'darkred',fontsize=12)

plt.show()

wilderness_areas = df.iloc[:,10:14].sum(axis=0)

plt.figure(figsize=(7,5))
sns.barplot(x=wilderness_areas.index, y=wilderness_areas.values,
            palette="Blues_d")

plt.xticks(rotation=90)
plt.title('Wilderness Areas',color = 'darkred',fontsize=12)
plt.ylabel('Total')

plt.show()

import pandas as pd
import plotly.express as px
cover_type = df["Cover_Type"].value_counts()
df_cover_type = pd.DataFrame({'CoverType': cover_type.index, 'Total': cover_type.values})
fig = px.bar(df_cover_type, x='CoverType', y='Total',
             height=400, width=650)
fig.show()

f,ax=plt.subplots(1,3,figsize=(18,5))
df.plot.scatter(ax=ax[0],x='Cover_Type', y='Horizontal_Distance_To_Fire_Points',
                      alpha=0.5, color='purple')

ax[0].set_title('Horizontal Distance To Fire Points')
x1=list(range(1,8,1))
ax[0].set_ylabel("")
ax[0].set_xlabel("Cover Type")
df.plot.scatter(ax=ax[1],x='Cover_Type', y='Horizontal_Distance_To_Roadways',
                      alpha=0.5, color='purple')

ax[1].set_title('Horizontal Distance To Roadways')
x2=list(range(1,8,1))
ax[1].set_ylabel("")
ax[1].set_xlabel("Cover Type")
df.plot.scatter(ax=ax[2],x='Cover_Type', y='Horizontal_Distance_To_Hydrology',
                      alpha=0.5, color='purple')

ax[2].set_title('Horizontal Distance To Hydrology')
x2=list(range(1,8,1))
ax[2].set_ylabel("")
ax[2].set_xlabel("Cover Type")

plt.show()

"""### Random Forest"""

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

features = df_without_soil.drop('Cover_Type', axis=1)
target = df_without_soil['Cover_Type']

X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

random_forest = RandomForestClassifier(n_estimators=100)
random_forest.fit(X_train, y_train)

y_pred = random_forest.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

print(classification_report(y_test, y_pred))

confusion_matrix = confusion_matrix(y_test, y_pred)
print(confusion_matrix)

from sklearn.preprocessing import label_binarize
from sklearn.metrics import roc_curve, auc

y_test_bin = label_binarize(y_test, classes=[1, 2, 3, 4, 5, 6, 7])
y_pred_bin = label_binarize(y_pred, classes=[1, 2, 3, 4, 5, 6, 7])

fpr = dict()
tpr = dict()
roc_auc = dict()

for i in range(7):
    fpr[i], tpr[i], _ = roc_curve(y_test_bin[:, i], y_pred_bin[:, i])
    roc_auc[i] = auc(fpr[i], tpr[i])

plt.figure()
lw = 2
colors = ['red', 'green', 'blue', 'orange', 'purple', 'cyan', 'black']

for i, color in zip(range(7), colors):
    plt.plot(fpr[i], tpr[i], color=color, lw=lw,
             label='ROC curve of class {0} (area = {1:0.2f})'.format(i + 1, roc_auc[i]))

plt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')

plt.legend(loc="lower right")
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver operating characteristic example')
plt.show()

